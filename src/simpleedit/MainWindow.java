package simpleedit;

/**
 * MainWindow.java
 *
 * @author Eugene Matiyuk (ematiyuk@gmail.com)
 * @year 2012
 */
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.print.PrinterException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.UndoableEditEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import javax.swing.event.UndoableEditListener;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.Highlighter;

public class MainWindow extends javax.swing.JFrame {

    private JFileChooser jFOpenDialog;
    private JFileChooser jFSaveDialog;
    private File currFileDirectory = null;
    private Font currFont = new Font("Serif", Font.PLAIN, 14);
    private Highlighter currHighLight;
    private final UndoManager undoManager = new UndoManager();
    private boolean isModified = false;
    private File currFile = null;

    /*  © Official program name  */
    private final String programName = "Simple Edit";

    private final String untitledFileName = "Безымянный";
    private static final int FILE_FORMAT_PDF = 1;
    private static final int FILE_FORMAT_HTML = 2;
    private static final int FILE_FORMAT_RTF = 3;

    /**
     * Creates new MainWindow
     */
    public MainWindow() {
        showDateTimeProgramStart();
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowListener() {

            public void windowOpened(WindowEvent e) {
            }

            public void windowClosing(WindowEvent e) {
                if (maybeSave()) {
                    showDateTimeProgramTermination();
                    e.getWindow().setVisible(false);
                    System.exit(0);
                }
            }

            public void windowClosed(WindowEvent e) {
            }

            public void windowIconified(WindowEvent e) {
            }

            public void windowDeiconified(WindowEvent e) {
            }

            public void windowActivated(WindowEvent e) {
            }

            public void windowDeactivated(WindowEvent e) {
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jContextMenu = new javax.swing.JPopupMenu();
        jUndo_ContextMenuItem = new javax.swing.JMenuItem();
        jRedo_ContextMenuItem = new javax.swing.JMenuItem();
        jSeparator1ContextMenu = new javax.swing.JPopupMenu.Separator();
        jCut_ContextMenuItem = new javax.swing.JMenuItem();
        jCopy_ContextMenuItem = new javax.swing.JMenuItem();
        jPaste_ContextMenuItem = new javax.swing.JMenuItem();
        jDelete_ContextMenuItem = new javax.swing.JMenuItem();
        jClear_ContextMenuItem = new javax.swing.JMenuItem();
        jSeparator2ContextMenu = new javax.swing.JPopupMenu.Separator();
        jSelectAll_ContextMenuItem = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jMainTextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jFileMenu = new javax.swing.JMenu();
        jCreateMenuItem = new javax.swing.JMenuItem();
        jOpenMenuItem = new javax.swing.JMenuItem();
        jSaveMenuItem = new javax.swing.JMenuItem();
        jSaveAsMenuItem = new javax.swing.JMenuItem();
        jExportMenu = new javax.swing.JMenu();
        jExportHTMLMenuItem = new javax.swing.JMenuItem();
        jExportRTFMenuItem = new javax.swing.JMenuItem();
        jExportPDFMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jPrintMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jExitMenuItem = new javax.swing.JMenuItem();
        jEditMenu = new javax.swing.JMenu();
        jUndoMenuItem = new javax.swing.JMenuItem();
        jRedoMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jCutMenuItem = new javax.swing.JMenuItem(jMainTextArea.getActionMap().get(DefaultEditorKit.cutAction));
        jCopyMenuItem = new javax.swing.JMenuItem(jMainTextArea.getActionMap().get(DefaultEditorKit.copyAction));
        jPasteMenuItem = new javax.swing.JMenuItem(jMainTextArea.getActionMap().get(DefaultEditorKit.pasteAction));
        jDeleteMenuItem = new javax.swing.JMenuItem();
        jClearMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jFindMenuItem = new javax.swing.JMenuItem();
        jGoToMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jSelectAllMenuItem = new javax.swing.JMenuItem();
        jTimeDateMenuItem = new javax.swing.JMenuItem();
        jFormatMenu = new javax.swing.JMenu();
        jLineWrapCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jFontMenuItem = new javax.swing.JMenuItem();
        jHelpMenu = new javax.swing.JMenu();
        jAboutProgramMenuItem = new javax.swing.JMenuItem();

        jDialog1.setTitle("About program");
        jDialog1.setMinimumSize(new java.awt.Dimension(100, 90));

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jUndo_ContextMenuItem.setText("Отменить");
        jUndo_ContextMenuItem.setEnabled(false);
        jUndo_ContextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUndo_ContextMenuItemActionPerformed(evt);
            }
        });
        jContextMenu.add(jUndo_ContextMenuItem);

        jRedo_ContextMenuItem.setText("Вернуть");
        jRedo_ContextMenuItem.setEnabled(false);
        jRedo_ContextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRedo_ContextMenuItemActionPerformed(evt);
            }
        });
        jContextMenu.add(jRedo_ContextMenuItem);
        jContextMenu.add(jSeparator1ContextMenu);

        jCut_ContextMenuItem.setText("Вырезать");
        jCut_ContextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCut_ContextMenuItemActionPerformed(evt);
            }
        });
        jContextMenu.add(jCut_ContextMenuItem);

        jCopy_ContextMenuItem.setText("Копировать");
        jCopy_ContextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCopy_ContextMenuItemActionPerformed(evt);
            }
        });
        jContextMenu.add(jCopy_ContextMenuItem);

        jPaste_ContextMenuItem.setText("Вставить");
        jPaste_ContextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPaste_ContextMenuItemActionPerformed(evt);
            }
        });
        jContextMenu.add(jPaste_ContextMenuItem);

        jDelete_ContextMenuItem.setText("Удалить");
        jDelete_ContextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDelete_ContextMenuItemActionPerformed(evt);
            }
        });
        jContextMenu.add(jDelete_ContextMenuItem);

        jClear_ContextMenuItem.setText("Очистить");
        jClear_ContextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClear_ContextMenuItemActionPerformed(evt);
            }
        });
        jContextMenu.add(jClear_ContextMenuItem);
        jContextMenu.add(jSeparator2ContextMenu);

        jSelectAll_ContextMenuItem.setText("Выделить все");
        jSelectAll_ContextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSelectAll_ContextMenuItemActionPerformed(evt);
            }
        });
        jContextMenu.add(jSelectAll_ContextMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jMainTextArea.setColumns(20);
        jMainTextArea.setRows(5);
        jMainTextArea.setTabSize(4);
        jMainTextArea.setToolTipText(null);
        jMainTextArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jMainTextArea.setComponentPopupMenu(jContextMenu);
        jMainTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jMainTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMainTextAreaMouseClicked(evt);
            }
        });
        jMainTextArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jMainTextAreaCaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(jMainTextArea);
        jMainTextArea.getDocument().addUndoableEditListener(
            new UndoableEditListener() {
                public void undoableEditHappened(UndoableEditEvent e) {
                    undoManager.addEdit(e.getEdit());
                    jUndoMenuItem.setEnabled(undoManager.canUndo());
                    jRedoMenuItem.setEnabled(undoManager.canRedo());
                    jUndo_ContextMenuItem.setEnabled(undoManager.canUndo());
                    jRedo_ContextMenuItem.setEnabled(undoManager.canRedo());
                }
            });
            jMainTextArea.getDocument().addDocumentListener(new DocumentListener() {
                public void insertUpdate(DocumentEvent e)
                {
                    isModified = true;
                    if (jMainTextArea.getText().equals("")){
                        jFindMenuItem.setEnabled(false);
                    }else{
                        jFindMenuItem.setEnabled(true);
                    }
                }
                public void removeUpdate(DocumentEvent e)
                {
                    isModified = true;
                    if (jMainTextArea.getText().equals("")){
                        jFindMenuItem.setEnabled(false);
                    }else{
                        jFindMenuItem.setEnabled(true);
                    }
                }
                public void changedUpdate(DocumentEvent e)
                {
                    isModified = true;
                    if (jMainTextArea.getText().equals("")){
                        jFindMenuItem.setEnabled(false);
                    }else{
                        jFindMenuItem.setEnabled(true);
                    }
                }
            });
            jMainTextArea.getAccessibleContext().setAccessibleName("");

            jFileMenu.setText("Файл");

            jCreateMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
            jCreateMenuItem.setText("Создать");
            jCreateMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCreateMenuItemActionPerformed(evt);
                }
            });
            jFileMenu.add(jCreateMenuItem);

            jOpenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
            jOpenMenuItem.setText("Открыть...");
            jOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jOpenMenuItemActionPerformed(evt);
                }
            });
            jFileMenu.add(jOpenMenuItem);

            jSaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
            jSaveMenuItem.setText("Сохранить");
            jSaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jSaveMenuItemActionPerformed(evt);
                }
            });
            jFileMenu.add(jSaveMenuItem);

            jSaveAsMenuItem.setText("Сохранить как...");
            jSaveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jSaveAsMenuItemActionPerformed(evt);
                }
            });
            jFileMenu.add(jSaveAsMenuItem);

            jExportMenu.setText("Экспорт");

            jExportHTMLMenuItem.setText("как документ HTML...");
            jExportHTMLMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jExportHTMLMenuItemActionPerformed(evt);
                }
            });
            jExportMenu.add(jExportHTMLMenuItem);

            jExportRTFMenuItem.setText("как документ RTF...");
            jExportRTFMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jExportRTFMenuItemActionPerformed(evt);
                }
            });
            jExportMenu.add(jExportRTFMenuItem);

            jExportPDFMenuItem.setText("как документ PDF...");
            jExportPDFMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jExportPDFMenuItemActionPerformed(evt);
                }
            });
            jExportMenu.add(jExportPDFMenuItem);

            jFileMenu.add(jExportMenu);

            jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
            jFileMenu.add(jSeparator1);

            jPrintMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
            jPrintMenuItem.setText("Печать...");
            jPrintMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jPrintMenuItemActionPerformed(evt);
                }
            });
            jFileMenu.add(jPrintMenuItem);
            jFileMenu.add(jSeparator2);

            jExitMenuItem.setText("Выход");
            jExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jExitMenuItemActionPerformed(evt);
                }
            });
            jFileMenu.add(jExitMenuItem);

            jMenuBar1.add(jFileMenu);

            jEditMenu.setText("Правка");

            jUndoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
            jUndoMenuItem.setText("Отменить");
            jUndoMenuItem.setEnabled(false);
            jUndoMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jUndoMenuItemActionPerformed(evt);
                }
            });
            jEditMenu.add(jUndoMenuItem);

            jRedoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
            jRedoMenuItem.setText("Вернуть");
            jRedoMenuItem.setEnabled(false);
            jRedoMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jRedoMenuItemActionPerformed(evt);
                }
            });
            jEditMenu.add(jRedoMenuItem);
            jEditMenu.add(jSeparator3);

            jCutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
            jCutMenuItem.setText("Вырезать");
            jEditMenu.add(jCutMenuItem);

            jCopyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
            jCopyMenuItem.setText("Копировать");
            jEditMenu.add(jCopyMenuItem);

            jPasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
            jPasteMenuItem.setText("Вставить");
            jEditMenu.add(jPasteMenuItem);

            jDeleteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
            jDeleteMenuItem.setText("Удалить");
            jDeleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jDeleteMenuItemActionPerformed(evt);
                }
            });
            jEditMenu.add(jDeleteMenuItem);

            jClearMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_MASK));
            jClearMenuItem.setText("Очистить");
            jClearMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jClearMenuItemActionPerformed(evt);
                }
            });
            jEditMenu.add(jClearMenuItem);
            jEditMenu.add(jSeparator4);

            jFindMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
            jFindMenuItem.setText("Найти...");
            jFindMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jFindMenuItemActionPerformed(evt);
                }
            });
            jEditMenu.add(jFindMenuItem);

            jGoToMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
            jGoToMenuItem.setText("Перейти...");
            jGoToMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jGoToMenuItemActionPerformed(evt);
                }
            });
            jEditMenu.add(jGoToMenuItem);
            jEditMenu.add(jSeparator5);

            jSelectAllMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
            jSelectAllMenuItem.setText("Выделить все");
            jSelectAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jSelectAllMenuItemActionPerformed1(evt);
                }
            });
            jEditMenu.add(jSelectAllMenuItem);

            jTimeDateMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
            jTimeDateMenuItem.setText("Время и дата");
            jTimeDateMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTimeDateMenuItemActionPerformed(evt);
                }
            });
            jEditMenu.add(jTimeDateMenuItem);

            jMenuBar1.add(jEditMenu);

            jFormatMenu.setText("Формат");

            jLineWrapCheckBoxMenuItem.setText("Перенос по словам");
            jLineWrapCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jLineWrapCheckBoxMenuItemActionPerformed(evt);
                }
            });
            jFormatMenu.add(jLineWrapCheckBoxMenuItem);

            jFontMenuItem.setText("Шрифт...");
            jFontMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jFontMenuItemActionPerformed(evt);
                }
            });
            jFormatMenu.add(jFontMenuItem);

            jMenuBar1.add(jFormatMenu);

            jHelpMenu.setText("Справка");

            jAboutProgramMenuItem.setText("О программе");
            jAboutProgramMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jAboutProgramMenuItemActionPerformed(evt);
                }
            });
            jHelpMenu.add(jAboutProgramMenuItem);

            jMenuBar1.add(jHelpMenu);

            setJMenuBar(jMenuBar1);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 610, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExitMenuItemActionPerformed
        if (maybeSave()) {
            this.showDateTimeProgramTermination();
            System.exit(0);
        }
}//GEN-LAST:event_jExitMenuItemActionPerformed
    private void showDateTimeProgramStart() {
        String dateStart = new SimpleDateFormat("dd.MM.yyyy kk:mm:ss").format(Calendar.getInstance().getTime());
        System.out.println("\nApplication was started on " + dateStart + ".\n");
    }

    private void showDateTimeProgramTermination() {
        String dateEnd = new SimpleDateFormat("dd.MM.yyyy kk:mm:ss").format(Calendar.getInstance().getTime());
        System.out.println("Application was terminated on " + dateEnd + ".\n");
    }

    private boolean maybeSave() {
        if (isModified) {
            String message = "Сохранить изменения в текущем файле?";
            int response = JOptionPane.showConfirmDialog(this, message, programName, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null);
            switch (response) {
                case JOptionPane.YES_OPTION:
                    return save();
                case JOptionPane.NO_OPTION:
                    isModified = false;
                    break;
                case JOptionPane.CANCEL_OPTION:
                case JOptionPane.CLOSED_OPTION:
                    return false;
            }
        }
        return true;
    }

    private boolean save() {
        if (currFile == null) {
            return saveAs();
        } else {
            return IOManager.saveFile(currFile, jMainTextArea.getText());
        }
    }

    private boolean saveAs() {
        jFSaveDialog = new JFileChooser();
        jFSaveDialog.setDialogTitle("Сохранить как");
        jFSaveDialog.setFileFilter(new FileNameExtensionFilter("Текстовые документы (*.txt)", "txt"));
        jFSaveDialog.setCurrentDirectory(currFileDirectory);

        int saveDialogResult = jFSaveDialog.showSaveDialog(jFileMenu);
        File selectedFile = jFSaveDialog.getSelectedFile();
        if (saveDialogResult == JFileChooser.APPROVE_OPTION) {
            String fileName = selectedFile.getName();
            boolean saveResult = false;
            if (selectedFile.exists()) {
                String message = "\"" + fileName + "\"" + " уже существует.\nЗаменить?";
                int response = JOptionPane.showConfirmDialog(jMainTextArea, message, "Подтверждение сохранения в виде", JOptionPane.YES_NO_OPTION);
                switch (response) {
                    case JOptionPane.YES_OPTION:
                        if (saveResult = IOManager.saveFile(selectedFile, jMainTextArea.getText())) {
                            this.setWindowTitle(fileName);
                            System.out.println("File \"" + fileName + "\" was replaced in \"" + selectedFile.getParent() + "\\\".\n");
                        }
                        currFileDirectory = selectedFile;
                        break;
                    case JOptionPane.NO_OPTION:
                    case JOptionPane.CLOSED_OPTION:
                        return saveResult;
                }
                return saveResult;
            } else {
                currFileDirectory = selectedFile;
                if (saveResult = IOManager.saveFile(selectedFile, jMainTextArea.getText())) {
                    System.out.println("File \"" + fileName + "\"" + " was saved to \"" + selectedFile.getParent() + "\\\".\n");
                }
                return saveResult;
            }
        } else {
            System.out.println("File saving was cancelled.\n");
            return false;
        }
    }

    private void setCurrentFile(File filePath) {
        currFile = filePath;
        isModified = false;
        String shownName;
        if (currFile == null) {
            shownName = untitledFileName;
        } else {
            shownName = currFile.getName();
        }
        this.setWindowTitle(shownName);
    }

    private void newFile() {
        if (maybeSave()) {
            jMainTextArea.setText("");
            this.setCurrentFile(null);
            this.setDisableUndoRedoMenusItems();
        }
    }

    private void open() {
        if (maybeSave()) {
            jFOpenDialog = new JFileChooser();
            jFOpenDialog.setDialogTitle("Открыть");
            jFOpenDialog.setFileFilter(new FileNameExtensionFilter("Текстовые документы (*.txt)", "txt"));
            jFOpenDialog.setCurrentDirectory(currFileDirectory);
            jFOpenDialog.setFileHidingEnabled(false);

            int openDialogResult = jFOpenDialog.showOpenDialog(jFileMenu);
            File selectedFile = jFOpenDialog.getSelectedFile();
            if (openDialogResult == JFileChooser.APPROVE_OPTION) {
                String fileName = selectedFile.getName();
                if (!selectedFile.exists()) {

                    String message = fileName + "\nФайл не найден.\nПроверте правильность имени файла и повторите попытку.";
                    JOptionPane.showMessageDialog(jMainTextArea, message, "Открыть", JOptionPane.WARNING_MESSAGE);
                    System.out.println("File \"" + fileName + "\" was not found.\n");
                    return;
                } else {
                    currFileDirectory = selectedFile;

                    if (loadFile(selectedFile)) {
                        this.setDisableUndoRedoMenusItems();
                        System.out.println("File \"" + fileName + "\"" + " was opened from \"" + selectedFile.getParent() + "\\\".\n");
                    } else {
                        System.out.println("Error occured while file opening.");
                        return;
                    }
                }
            } else {
                isModified = true;
                System.out.println("File opening was cancelled.\n");
            }
        }
    }

    private boolean loadFile(File filePath) {
        jMainTextArea.setText(null);
        jMainTextArea.setText(IOManager.readFile(filePath).toString());
        setCurrentFile(filePath);
        jMainTextArea.setCaretPosition(0);
        return true;
    }

    private void showExportDialog(String formatTitle, int fileFormat, String description, String... extensions) {
        jFSaveDialog = new JFileChooser();
        jFSaveDialog.setDialogTitle("Экспортировать как документ " + formatTitle);
        jFSaveDialog.setFileFilter(new FileNameExtensionFilter(description, extensions));
        jFSaveDialog.setCurrentDirectory(currFileDirectory);
        jFSaveDialog.setAcceptAllFileFilterUsed(false);
        if (currFile != null) {
            jFSaveDialog.setSelectedFile(Utils.changeFileExtension(currFile.getName(), extensions[0]));
        }

        int saveDialogResult = jFSaveDialog.showSaveDialog(jFileMenu);
        File selectedFile = jFSaveDialog.getSelectedFile();
        if (saveDialogResult == JFileChooser.APPROVE_OPTION) {
            String fileName = selectedFile.getName();
            boolean savingResult = false;
            String consoleStr = ""; // optional
            if (selectedFile.exists()) {
                String message = "\"" + fileName + "\"" + " уже существует.\nЗаменить?";
                int response = JOptionPane.showConfirmDialog(this, message, "Подтверждение сохранения в виде", JOptionPane.YES_NO_OPTION);
                switch (response) {
                    case JOptionPane.YES_OPTION:
                        consoleStr = "File \"" + fileName + "\" was replaced in \"" + selectedFile.getParent() + "\\\"" + " while exporting.\n";
                        break;
                    case JOptionPane.NO_OPTION:
                    case JOptionPane.CLOSED_OPTION:
                        return;
                }
            } else {
                consoleStr = "File \"" + fileName + "\"" + " was exported to \"" + selectedFile.getParent() + "\\\".\n";
            }
            currFileDirectory = selectedFile;
            switch (fileFormat) {
                case FILE_FORMAT_PDF:
                    savingResult = IOManager.saveAsPDF(selectedFile, jMainTextArea.getText());
                    break;
                case FILE_FORMAT_HTML:
                    savingResult = IOManager.saveAsHTML(selectedFile, jMainTextArea.getText());
                    break;
                case FILE_FORMAT_RTF:
                    savingResult = IOManager.saveAsRTF(selectedFile, jMainTextArea.getText());
                    break;
            }
            if (savingResult) {
                System.out.println(consoleStr);
            }
        } else {
            System.out.println("File " + formatTitle + " export was cancelled.\n");
        }
    }

    private void setWindowTitle(String shownName) {
        MainWindow.this.setTitle(shownName + " — " + programName);
    }

    private void showFontDilaog() {
        FontChooserDialog jFontDialog = new FontChooserDialog(this, "Шрифт", true, null);
        jFontDialog.setLocationRelativeTo(this);
        jFontDialog.setSize(400, 400);
        jFontDialog.setSelectedFont(currFont);
        jFontDialog.setVisible(true);
        if (jFontDialog.isCancelled()) {
            System.out.println("Font choosing was cancelled.\n");
        } else {
            currFont = jFontDialog.getSelectedFont();
            jMainTextArea.setFont(currFont);
            System.out.println("Selected font: " + currFont + "\n");
        }
    }

    private void setLineWrap() {
        if (jLineWrapCheckBoxMenuItem.isSelected()) {
            jMainTextArea.setLineWrap(true);
            jGoToMenuItem.setEnabled(false);
        } else {
            jMainTextArea.setLineWrap(false);
            jGoToMenuItem.setEnabled(true);
        }
    }

    private void showPrintDialog() {
        boolean response = true;
        try {
            response = jMainTextArea.print(null, null, true, null, null, true);
        } catch (PrinterException printerException) {
            System.out.println("PrinterException was occured: " + printerException);
        }
        if (response) {
            System.out.println("Printing was done.\n");
        } else {
            System.out.println("Printing was cancelled.\n");
        }
    }

    private void showFindDialog() {
        FindDialog jFindDialog = new FindDialog(this, true);
        jFindDialog.setLocationRelativeTo(this);
        jFindDialog.setTextArea(jMainTextArea);
        jFindDialog.setProgramName(programName);
        jFindDialog.showDialog();
    }

    private void showGoToDialog() {
        GotoDialog jGotoDialog = new GotoDialog(this, true);
        jGotoDialog.setLocationRelativeTo(this);
        jGotoDialog.setTextArea(jMainTextArea);
        jGotoDialog.setProgramName(programName);
        jGotoDialog.showDialog();
    }

    private void showAboutProgramDialog() {
        AboutWindow aboutProgramWindow = new AboutWindow(this, true);
        aboutProgramWindow.setLocationRelativeTo(this);
        aboutProgramWindow.setProgramName(programName);
        aboutProgramWindow.setSize(new Dimension(435, 230));
        aboutProgramWindow.setVisible(true);
    }

    private void undo() {
        try {
            undoManager.undo();
        } catch (CannotUndoException cannotUndoException) {
            System.out.println("CannotUndoException was occured: " + cannotUndoException);
        }
    }

    private void redo() {
        try {
            undoManager.redo();
        } catch (CannotRedoException cannotRedoException) {
            System.out.println("CannotRedoException was occured: " + cannotRedoException);
        }
    }

    private void setUndoRedoMenusItemsStateByCheckingUndoRedo() {
        jUndoMenuItem.setEnabled(undoManager.canUndo());
        jRedoMenuItem.setEnabled(undoManager.canRedo());
        jRedo_ContextMenuItem.setEnabled(undoManager.canRedo());
        jUndo_ContextMenuItem.setEnabled(undoManager.canUndo());
    }

    private void setDisableUndoRedoMenusItems() {
        jUndoMenuItem.setEnabled(false);
        jRedoMenuItem.setEnabled(false);
        jRedo_ContextMenuItem.setEnabled(false);
        jUndo_ContextMenuItem.setEnabled(false);
    }

    private void setCopyCutDeleteMenusItemsBySelectedText() {
        if (jMainTextArea.getSelectedText() == null) {
            jCutMenuItem.setEnabled(false);
            jCopyMenuItem.setEnabled(false);
            jDeleteMenuItem.setEnabled(false);
            jCut_ContextMenuItem.setEnabled(false);
            jCopy_ContextMenuItem.setEnabled(false);
            jDelete_ContextMenuItem.setEnabled(false);
        } else {
            jCutMenuItem.setEnabled(true);
            jCopyMenuItem.setEnabled(true);
            jDeleteMenuItem.setEnabled(true);
            jCut_ContextMenuItem.setEnabled(true);
            jCopy_ContextMenuItem.setEnabled(true);
            jDelete_ContextMenuItem.setEnabled(true);
        }
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    }//GEN-LAST:event_formWindowClosing

    private void jAboutProgramMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAboutProgramMenuItemActionPerformed
        showAboutProgramDialog();
    }//GEN-LAST:event_jAboutProgramMenuItemActionPerformed

    private void jSaveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveAsMenuItemActionPerformed
        saveAs();
    }//GEN-LAST:event_jSaveAsMenuItemActionPerformed

    private void jFontMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFontMenuItemActionPerformed
        showFontDilaog();
    }//GEN-LAST:event_jFontMenuItemActionPerformed

    private void jLineWrapCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLineWrapCheckBoxMenuItemActionPerformed
        setLineWrap();
    }//GEN-LAST:event_jLineWrapCheckBoxMenuItemActionPerformed

    private void jTimeDateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTimeDateMenuItemActionPerformed
        jMainTextArea.insert(new SimpleDateFormat("kk:mm dd.MM.yyyy").format(Calendar.getInstance().getTime()), jMainTextArea.getCaretPosition());
    }//GEN-LAST:event_jTimeDateMenuItemActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        jMainTextArea.selectAll();
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jPrintMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPrintMenuItemActionPerformed
        this.showPrintDialog();
    }//GEN-LAST:event_jPrintMenuItemActionPerformed

    private void jUndoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUndoMenuItemActionPerformed
        undo();
        setUndoRedoMenusItemsStateByCheckingUndoRedo();
    }//GEN-LAST:event_jUndoMenuItemActionPerformed

    private void jRedoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRedoMenuItemActionPerformed
        redo();
        setUndoRedoMenusItemsStateByCheckingUndoRedo();
    }//GEN-LAST:event_jRedoMenuItemActionPerformed

    private void jSelectAllMenuItemActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSelectAllMenuItemActionPerformed1
        jMainTextArea.selectAll();
    }//GEN-LAST:event_jSelectAllMenuItemActionPerformed1

    private void jDeleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteMenuItemActionPerformed
        jMainTextArea.replaceSelection(null);
    }//GEN-LAST:event_jDeleteMenuItemActionPerformed

    private void jFindMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFindMenuItemActionPerformed
        showFindDialog();
    }//GEN-LAST:event_jFindMenuItemActionPerformed

    private void jGoToMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGoToMenuItemActionPerformed
        showGoToDialog();
    }//GEN-LAST:event_jGoToMenuItemActionPerformed

    private void jCreateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCreateMenuItemActionPerformed
        newFile();
    }//GEN-LAST:event_jCreateMenuItemActionPerformed

    private void jUndo_ContextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUndo_ContextMenuItemActionPerformed
        undo();
        setUndoRedoMenusItemsStateByCheckingUndoRedo();
    }//GEN-LAST:event_jUndo_ContextMenuItemActionPerformed

    private void jRedo_ContextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRedo_ContextMenuItemActionPerformed
        redo();
        setUndoRedoMenusItemsStateByCheckingUndoRedo();
    }//GEN-LAST:event_jRedo_ContextMenuItemActionPerformed

    private void jSelectAll_ContextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSelectAll_ContextMenuItemActionPerformed
        jMainTextArea.selectAll();
    }//GEN-LAST:event_jSelectAll_ContextMenuItemActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setWindowTitle(untitledFileName);
        currHighLight = jMainTextArea.getHighlighter();

        jFindMenuItem.setEnabled(false);
        jCut_ContextMenuItem.setEnabled(false);
        jCopy_ContextMenuItem.setEnabled(false);
        jDelete_ContextMenuItem.setEnabled(false);
        jCutMenuItem.setEnabled(false);
        jCopyMenuItem.setEnabled(false);
        jDeleteMenuItem.setEnabled(false);
    }//GEN-LAST:event_formWindowOpened

    private void jDelete_ContextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDelete_ContextMenuItemActionPerformed
        jMainTextArea.replaceSelection(null);
    }//GEN-LAST:event_jDelete_ContextMenuItemActionPerformed

    private void jCut_ContextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCut_ContextMenuItemActionPerformed
        jMainTextArea.cut();
    }//GEN-LAST:event_jCut_ContextMenuItemActionPerformed

    private void jCopy_ContextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCopy_ContextMenuItemActionPerformed
        jMainTextArea.copy();
    }//GEN-LAST:event_jCopy_ContextMenuItemActionPerformed

    private void jSaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveMenuItemActionPerformed
        save();
    }//GEN-LAST:event_jSaveMenuItemActionPerformed

    private void jOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenMenuItemActionPerformed
        open();
    }//GEN-LAST:event_jOpenMenuItemActionPerformed

    private void jClearMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jClearMenuItemActionPerformed
        jMainTextArea.setText("");
    }//GEN-LAST:event_jClearMenuItemActionPerformed

    private void jClear_ContextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jClear_ContextMenuItemActionPerformed
        jMainTextArea.setText("");
    }//GEN-LAST:event_jClear_ContextMenuItemActionPerformed

    private void jPaste_ContextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPaste_ContextMenuItemActionPerformed
        jMainTextArea.paste();
    }//GEN-LAST:event_jPaste_ContextMenuItemActionPerformed

    private void jMainTextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMainTextAreaMouseClicked
        jMainTextArea.setHighlighter(currHighLight);
    }//GEN-LAST:event_jMainTextAreaMouseClicked

    private void jMainTextAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jMainTextAreaCaretUpdate
        setCopyCutDeleteMenusItemsBySelectedText();
    }//GEN-LAST:event_jMainTextAreaCaretUpdate

    private void jExportPDFMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExportPDFMenuItemActionPerformed
        showExportDialog("PDF", FILE_FORMAT_PDF, "PDF документы (*.pdf)", "pdf");
    }//GEN-LAST:event_jExportPDFMenuItemActionPerformed

    private void jExportHTMLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExportHTMLMenuItemActionPerformed
        showExportDialog("HTML", FILE_FORMAT_HTML, "HTML документы (*.html; *.htm)", "html", "htm");
    }//GEN-LAST:event_jExportHTMLMenuItemActionPerformed

    private void jExportRTFMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExportRTFMenuItemActionPerformed
        showExportDialog("RTF", FILE_FORMAT_RTF, "RTF документы (*.rtf)", "rtf");
    }//GEN-LAST:event_jExportRTFMenuItemActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jAboutProgramMenuItem;
    private javax.swing.JMenuItem jClearMenuItem;
    private javax.swing.JMenuItem jClear_ContextMenuItem;
    private javax.swing.JPopupMenu jContextMenu;
    private javax.swing.JMenuItem jCopyMenuItem;
    private javax.swing.JMenuItem jCopy_ContextMenuItem;
    private javax.swing.JMenuItem jCreateMenuItem;
    private javax.swing.JMenuItem jCutMenuItem;
    private javax.swing.JMenuItem jCut_ContextMenuItem;
    private javax.swing.JMenuItem jDeleteMenuItem;
    private javax.swing.JMenuItem jDelete_ContextMenuItem;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JMenu jEditMenu;
    private javax.swing.JMenuItem jExitMenuItem;
    private javax.swing.JMenuItem jExportHTMLMenuItem;
    private javax.swing.JMenu jExportMenu;
    private javax.swing.JMenuItem jExportPDFMenuItem;
    private javax.swing.JMenuItem jExportRTFMenuItem;
    private javax.swing.JMenu jFileMenu;
    private javax.swing.JMenuItem jFindMenuItem;
    private javax.swing.JMenuItem jFontMenuItem;
    private javax.swing.JMenu jFormatMenu;
    private javax.swing.JMenuItem jGoToMenuItem;
    private javax.swing.JMenu jHelpMenu;
    private javax.swing.JCheckBoxMenuItem jLineWrapCheckBoxMenuItem;
    private javax.swing.JTextArea jMainTextArea;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jOpenMenuItem;
    private javax.swing.JMenuItem jPasteMenuItem;
    private javax.swing.JMenuItem jPaste_ContextMenuItem;
    private javax.swing.JMenuItem jPrintMenuItem;
    private javax.swing.JMenuItem jRedoMenuItem;
    private javax.swing.JMenuItem jRedo_ContextMenuItem;
    private javax.swing.JMenuItem jSaveAsMenuItem;
    private javax.swing.JMenuItem jSaveMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem jSelectAllMenuItem;
    private javax.swing.JMenuItem jSelectAll_ContextMenuItem;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator1ContextMenu;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator2ContextMenu;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JMenuItem jTimeDateMenuItem;
    private javax.swing.JMenuItem jUndoMenuItem;
    private javax.swing.JMenuItem jUndo_ContextMenuItem;
    // End of variables declaration//GEN-END:variables
}
